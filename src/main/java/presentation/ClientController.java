package presentation;

import bll.ClientBLL;
import bll.PurchaseBLL;
import model.Client;
import model.Purchase;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * The ClientController class is responsible for controlling the user interactions with the client management system.
 * It handles the events triggered by the user interface of the client view and interacts with the business logic layer.
 * This class implements ActionListener interface to listen to the events generated by the user interface.
 * It contains inner classes to handle the specific events and to perform the operations according to the event.
 */
public class ClientController {
    /**
     * The view object of the ClientView class.
     */
    private ClientView view;

    /**
     * Constructs a ClientController object with the specified view object.
     * Adds action listeners to the view's buttons.
     *
     * @param view the view object of the ClientView class
     */
    public ClientController(ClientView view) {
        this.view = view;
        this.view.editDelete(new EditDelete());
        this.view.create(new Create());
        this.view.showAll(new ShowAll());
        this.view.reset(new Reset());
    }

    /**
     * Inner class that implements ActionListener interface to handle the edit and delete event.
     */
    class EditDelete implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (view.getComboBox() == 0) {
                //edit case
                try {
                    ClientBLL clientBLL = new ClientBLL();
                    Client client = new Client(view.getNameTextField(), view.getAddressTextField(), view.getEmailTextField(), view.getPasswordField());
                    int oldId = clientBLL.findClientByEmail(view.getEmailTextField()).getId();
                    clientBLL.editClient(client, oldId);
                    view.showMessage("Account modified successfully!");
                } catch (Exception ex) {
                    ex.printStackTrace();
                    view.showErrorMessage("Error during edit!");
                }
            } else {
                if (view.getComboBox() == 1) {
                    //delete case
                    try {
                        ClientBLL clientBLL = new ClientBLL();
                        Client client = clientBLL.findClientByEmail(view.getEmailTextField());
                        if (client == null) {
                            view.showErrorMessage("Client not found!");
                        } else {
                            if (!Objects.equals(client.getPassword(), view.getPasswordField())) {
                                view.showErrorMessage("Incorrect password!");
                            } else {
                                PurchaseBLL purchaseBLL = new PurchaseBLL();
                                List<Purchase> list = purchaseBLL.findOrderByClient(client.getId());
                                if (list != null) {
                                    for (Purchase p : list) {
                                        purchaseBLL.deleteOrder(p);
                                        System.out.println(p.getId());
                                    }
                                    view.showErrorMessage("All the orders made by this user will be deleted!");
                                    clientBLL.deleteClient(client);
                                    view.showMessage("Account deleted successfully!");
                                } else {
                                    clientBLL.deleteClient(client);
                                    view.showMessage("Account deleted successfully!");
                                }
                            }
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        view.showErrorMessage("Error during delete!");
                    }
                } else {
                    view.showErrorMessage("Error at ComboBox!");
                }
            }
        }
    }

    /**
     * Inner class that implements ActionListener interface to handle the create event.
     */
    class Create implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                ClientBLL clientBLL = new ClientBLL();
                Client client = new Client(view.getNameTextField(), view.getAddressTextField(), view.getEmailTextField(), view.getPasswordField());
                int id = clientBLL.insertClient(client);
                System.out.println(id);
                if (id != -1) {
                    view.showMessage("Client " + view.getNameTextField() + " successfully created!");
                } else {
                    view.showErrorMessage("Account already exists!");
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                view.showErrorMessage("Error at creating account!");
            }
        }
    }

    /**
     * Inner class that implements ActionListener interface to handle the show event.
     */
    class ShowAll implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                ClientBLL clientBLL = new ClientBLL();
                ArrayList<Client> temporaryList = (ArrayList<Client>) clientBLL.getAllClients();
                ArrayList<Client> clients = new ArrayList<>();
                for (Client c : temporaryList) {
                    clients.add(new Client(c.getId(), c.getName(), c.getAddress(), c.getEmail()));
                }
                ClientView view2 = new ClientView(clients);
                view.dispose();
                ClientController controller = new ClientController(view2);
            } catch (Exception ex) {
                ex.printStackTrace();
                view.showErrorMessage("Error during listing all!");
            }
        }
    }

    /**
     * Inner class that implements ActionListener interface to handle the reset event.
     */
    class Reset implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            view.refresh();
        }
    }
}