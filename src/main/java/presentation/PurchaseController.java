package presentation;

import bll.ClientBLL;
import bll.PurchaseBLL;
import bll.ProductBLL;
import bll.BillBLL;
import model.Bill;
import model.Client;
import model.Purchase;
import model.Product;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;

/**
 * The PurchaseController class is responsible for controlling the user interactions with the orders management system.
 * It handles the events triggered by the user interface of the purchase view and interacts with the business logic layer.
 * This class implements ActionListener interface to listen to the events generated by the user interface.
 * It contains inner classes to handle the specific events and to perform the operations according to the event.
 */
public class PurchaseController {
    /**
     * The view object of the PurchaseView class.
     */
    private PurchaseView view;

    /**
     * Constructs a PurchaseController object with the specified view object.
     * Adds action listeners to the view's buttons.
     *
     * @param view the view object of the PurchaseView class
     */
    public PurchaseController(PurchaseView view) {
        this.view = view;
        view.placeOrder(new PlaceOrder());
        view.reset(new Reset());
        view.showAll(new ShowAll());
        view.goToBill(new GoToBill());
        view.delete(new Delete());
        view.edit(new Edit());
    }

    /**
     * Method that returns a boolean value indicating whether the client is authenticated by checking the email and password fields entered the GUI against those stored in the database.
     *
     * @return true if the client is authenticated
     * @throws SQLException
     */

    public boolean isAuthenticated() throws SQLException {
        String email = view.getClientTextField();
        String password = view.getPasswordField();
        ClientBLL clientBLL = new ClientBLL();
        Client client = clientBLL.findClientByEmail(email);
        return client.getPassword().equals(password);
    }

    /**
     * Inner class that implements ActionListener interface to handle the add event.
     */
    class PlaceOrder implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                if (isAuthenticated()) {
                    ClientBLL clientBLL = new ClientBLL();
                    ProductBLL productBLL = new ProductBLL();
                    Client client = clientBLL.findClientByEmail(view.getClientTextField());
                    Product product = productBLL.findProductByName(view.getProductTextField());
                    if (client == null) {
                        view.showErrorMessage("Non-existent email!");
                    } else if (product == null) {
                        view.showErrorMessage("Non-existent product!");
                    } else if (product.getQuantity() < view.getQuantityTextField()) {
                        view.showErrorMessage("Not enough " + product.getName() + " in stock!");
                    } else {
                        //order can be processed
                        PurchaseBLL purchaseBLL = new PurchaseBLL();
                        Purchase purchase = new Purchase(client.getId(), product.getId(), view.getQuantityTextField());
                        int idOrder = purchaseBLL.insertOrder(purchase);
                        Product newProduct = new Product(product.getId(), product.getName(), product.getPrice(), product.getQuantity() - purchase.getQuantity());
                        productBLL.editProduct(newProduct, product.getId());
                        if (idOrder != -1) {
                            view.setFinalPriceTextArea(product.getPrice() * view.getQuantityTextField());
                            view.showMessage("Order placed successfully!");
                            BillBLL billBLL = new BillBLL();
                            billBLL.insertBill(new Bill(0, client.getName(), client.getEmail(), product.getName(), purchase.getQuantity(), product.getPrice(), product.getPrice() * purchase.getQuantity()));
                        } else {
                            view.showMessage("ERROR!");
                        }
                    }
                } else {
                    view.showErrorMessage("INCORRECT PASSWORD!");
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                view.showErrorMessage("Error during placing order!");
            }
        }
    }

    /**
     * Inner class that implements ActionListener interface to handle the show event.
     */
    class ShowAll implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                PurchaseBLL purchaseBLL = new PurchaseBLL();
                ArrayList<Purchase> purchases = (ArrayList<Purchase>) purchaseBLL.getAllOrders();
                ArrayList<Purchase> newPurchases = (ArrayList<Purchase>) purchaseBLL.getAllOrders();
                PurchaseView view2 = new PurchaseView(newPurchases);
                view.dispose();
                PurchaseController purchaseController = new PurchaseController(view2);
            } catch (Exception ex) {
                ex.printStackTrace();
                view.showErrorMessage("Error during listing all!");
            }
        }
    }

    /**
     * Inner class that implements ActionListener interface to handle the go event.
     */
    class GoToBill implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            ArrayList<Bill> bills = new ArrayList<>();
            try {
                BillBLL billBLL = new BillBLL();
                bills = (ArrayList<Bill>) billBLL.getAllBills();
            } catch (SQLException ex) {
                throw new RuntimeException(ex);
            }
            BillView billView = new BillView(bills);
        }
    }

    /**
     * Inner class that implements ActionListener interface to handle the delete event.
     */
    class Delete implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                if (isAuthenticated()) {
                    PurchaseBLL purchaseBLL = new PurchaseBLL();
                    ProductBLL productBLL = new ProductBLL();
                    Purchase purchase = purchaseBLL.findOrderById(view.getIdOrderTextField());
                    Product product = productBLL.findProductById(purchase.getIdProduct());
                    productBLL.editProduct(new Product(product.getId(), product.getName(), product.getPrice(), product.getQuantity() + purchase.getQuantity()), product.getId());
                    purchaseBLL.deleteOrder(purchase);
                    view.showMessage("Order deleted successfully!");
                } else {
                    view.showErrorMessage("INCORRECT PASSWORD!");
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                view.showErrorMessage("Error during delete!");
            }
        }
    }

    /**
     * Inner class that implements ActionListener interface to handle the edit event.
     */
    class Edit implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                if (isAuthenticated()) {
                    PurchaseBLL purchaseBLL = new PurchaseBLL();
                    ProductBLL productBLL = new ProductBLL();
                    Purchase oldPurchase = purchaseBLL.findOrderById(view.getIdOrderTextField());
                    String newProductName = view.getNewProductTextField();
                    int newQuantity = view.getNewQuantityTextField();
                    Product oldProduct = productBLL.findProductById(oldPurchase.getIdProduct()), newProduct = productBLL.findProductByName(newProductName);
                    if (oldProduct.getName().equals(newProductName)) {
                        if (oldProduct.getQuantity() + oldPurchase.getQuantity() < newQuantity) {
                            view.showErrorMessage("Not enough products in stock!");
                        } else {
                            purchaseBLL.editOrder(new Purchase(oldPurchase.getId(), oldPurchase.getIdClient(), oldPurchase.getIdProduct(), newQuantity), oldPurchase.getId());
                            productBLL.editProduct(new Product(oldProduct.getId(), oldProduct.getName(), oldProduct.getPrice(), oldProduct.getQuantity() + oldPurchase.getQuantity() - newQuantity), oldProduct.getId());
                            view.showMessage("Order with id " + oldPurchase.getId() + " successfully updated!");
                            view.setFinalPriceTextArea(newQuantity * newProduct.getPrice());
                            BillBLL billBLL = new BillBLL();
                            ClientBLL clientBLL = new ClientBLL();
                            billBLL.insertBill(new Bill(0, clientBLL.findClientByEmail(view.getClientTextField()).getName(), view.getClientTextField(), newProductName, newQuantity, newProduct.getPrice(), newQuantity * newProduct.getPrice()));
                        }
                    } else {
                        if (newProduct.getQuantity() < newQuantity) {
                            view.showErrorMessage("Not enough products in stock!");
                        } else {
                            purchaseBLL.editOrder(new Purchase(oldPurchase.getId(), oldPurchase.getIdClient(), newProduct.getId(), newQuantity), oldPurchase.getId());
                            productBLL.editProduct(new Product(oldProduct.getId(), oldProduct.getName(), oldProduct.getPrice(), oldProduct.getQuantity() + oldPurchase.getQuantity()), oldProduct.getId());
                            productBLL.editProduct(new Product(newProduct.getId(), newProductName, newProduct.getPrice(), newProduct.getQuantity() - newQuantity), newProduct.getId());
                            view.showMessage("Order with id " + oldPurchase.getId() + " successfully updated!");
                            view.setFinalPriceTextArea(newQuantity * newProduct.getPrice());
                            BillBLL billBLL = new BillBLL();
                            ClientBLL clientBLL = new ClientBLL();
                            billBLL.insertBill(new Bill(0, clientBLL.findClientByEmail(view.getClientTextField()).getName(), view.getClientTextField(), newProductName, newQuantity, newProduct.getPrice(), newQuantity * newProduct.getPrice()));
                        }
                    }
                } else {
                    view.showErrorMessage("INCORRECT PASSWORD!");
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                view.showErrorMessage("Error during edit!");
            }
        }
    }

    /**
     * Inner class that implements ActionListener interface to handle the reset event.
     */
    class Reset implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            view.refresh();
        }
    }
}